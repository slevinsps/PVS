#!/usr/bin/python
# -*- coding: utf-8 -*-

from __future__ import with_statement

import sys
import re
import os
import os.path

from netaddr.ip import IPNetwork


class LabConfigError(RuntimeError):
    pass


def strip_comments(f):
    return [l.split("#")[0] for l in f.readlines()]


def set_ip(r, iface, ip, netmask):
    if ip != "":
        n = IPNetwork("%s/%s" % (ip, netmask))
        cidr = str(n.cidr)
        if 'cidr' not in r[iface]['net']:
            r[iface]['net']['cidr'] = cidr
        elif r[iface]['net']['cidr'] != cidr:
            raise LabConfigError("Network %s (%s) cannot contain IP %s" %
                                 (r[iface]['net']['name'], r[iface]['net']['cidr'], ip))
    else:
        ip = r[iface]['net']['cidr']
    r[iface]['ip'] = ip


re_lab_tap = re.compile("\s*(\w+)\[(\d+)\]\s*=\s*tap,\S+,(\S+)\s*")
re_lab = re.compile("\s*(\w+)\[(\d+)\]\s*=\s*(\w+)\s*")


def read_lab(lab_dir):
    routers = {}
    networks = {}

    def set_iface(r, iface, net):
        if r not in routers:
            routers[r] = {}
        if net not in networks:
            networks[net] = {'name': net}
        routers[r][iface] = {'net': networks[net]}

    def set_tap_iface(r, iface, ip):
        set_iface(r, iface, "tap")
        set_ip(routers[r], iface, ip, "255.255.0.0")

    with open(os.path.join(lab_dir, "lab.conf"), "r") as lab:
        for l in strip_comments(lab):
            m = re_lab_tap.match(l)
            if m:
                set_tap_iface(m.group(1), "eth" + m.group(2), m.group(3))
            else:
                m = re_lab.match(l)
                if m:
                    set_iface(m.group(1), "eth" + m.group(2), m.group(3))
    return routers


re_iface = re.compile("\s*iface\s+(\w+)\s+inet\s+(\w+)\.*")
re_addr = re.compile("\s*address\s+(\S+)\s*")
re_netmask = re.compile("\s*netmask\s+(\S+)\s*")


def read_networks(iface_file):
    ips = {}
    netmasks = {}
    
    def interface_processing_ended(iface, iface_type):
        if iface != None and iface_type == "dhcp":
            if iface not in ips:
                ips[iface] = ""
            if iface not in netmasks:
                netmasks[iface] = ""
        
    with open(iface_file, "r") as f:
        iface = None
        iface_type = None
        for l in strip_comments(f):
            mi = re_iface.match(l)
            if mi:
                interface_processing_ended(iface, iface_type)
                iface = mi.group(1)
                iface_type = mi.group(2)
            ma = re_addr.match(l)
            if ma:
                if not iface:
                    raise LabConfigError("Address line without interface in %s" % iface_file)
                elif iface_type == "dhcp":
                    print >>sys.stderr, "Address line for DHCP interface in %s - ignored" % iface_file
                else:
                    ips[iface] = ma.group(1)
                    # Fucking crazy FA implementation
                    if iface in netmasks:
                        iface = None
            mn = re_netmask.match(l)
            if mn:
                if not iface:
                    raise LabConfigError("Netmask line without interface in %s" % iface_file)
                elif iface_type == "dhcp":
                    print >>sys.stderr, "Netmask line for DHCP interface in %s - ignored" % iface_file
                else:
                    netmasks[iface] = mn.group(1)
                    # Just relax
                    if iface in ips:
                        iface = None
        interface_processing_ended(iface, iface_type)
    return ips, netmasks


def read_hosts(lab_dir, routers):
    ifaces = "etc/network/interfaces"
    for rname, r in routers.items():
        print rname
        iface_file = os.path.join(lab_dir, rname, ifaces)
        ips, netmasks = read_networks(iface_file)
        print ips
        for iface, ifd in r.items():
            if not 'ip' in ifd:
                print iface, ifd
                if not iface in ips:
                    raise LabConfigError("No %s in %s" % (iface, iface_file))
                set_ip(r, iface, ips[iface], netmasks[iface])
                print iface, ifd


def write_dot(gv_file, routers):
    nets = [net['net'] for r in routers.values() for net in r.values()]
    with open(gv_file, "w") as gv:
        print >>gv, "graph G {"
        print >>gv, 'node [shape=diamond, color="green"];'
        for r in sorted(routers.keys()):
            if len(routers[r]) > 1:
                print >>gv, r + ' [color="blue"];'
            else:
                print >>gv, r + ";"
        print >>gv, 'node [shape=ellipse, color="brown"];'
        for n in nets:
            print >>gv, '%s [label="%s"];' % (n['name'], n['cidr'])
        for r in sorted(routers.keys()):
            for i, ifd in routers[r].items():
                print >>gv, '%s -- %s [label="%s: %s", color="gray"];' % (r, ifd['net']['name'], i, ifd['ip'])
        print >>gv, "}"


def main():
    def usage():
        print >>sys.stderr, "Usage:", os.path.basename(sys.argv[0]), "lab_dir gv_file"

    if len(sys.argv) != 3:
        usage()
        sys.exit(1)
    else:
        try:
            routers = read_lab(sys.argv[1])
            read_hosts(sys.argv[1], routers)
            write_dot(sys.argv[2], routers)
        except LabConfigError, e:
            print >>sys.stderr, e
            sys.exit(2)


if __name__ == '__main__':
    main()
